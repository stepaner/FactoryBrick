@using System.Web;

@model List<Consumer>
@{

    ViewData["Title"] = "Графики потребления";
}
<style>
    p {
        margin-bottom: 2%; /* Отступ сверху */
    }
</style>
<div class="text-center">
    <h1>@ViewData["Title"]</h1>

    <p>Исходные графики</p>
    <canvas id="chartPlantMain"></canvas>
    <canvas id="chartHouseMain"></canvas>


    <form id="dateForm">
        <label for="dtFrom">Выберите дату начала запроса:</label>
        <input type="date" name="dtFrom" id="dtFrom">
        <label for="dtTo">Выберите дату конца запроса:</label>
        <input type="date" name="dtTo" id="dtTo">
        <button type="submit" id="submitDate">Обновить</button>
    </form>



    <p>Линейные графики</p>
    <canvas id="chartHouseLinearRegression"></canvas>
    <canvas id="chartPlantLinearRegression"></canvas>
    <button id="drawLinearRegression">Обновить линейные графики</button>

    <br><br>
    <form id="predictation">
        <label for="brickInput">Введите стоимость кирпича:</label>
        <input type="number" name="brick" id="brickInput" size="10" value="1" min="1">
        <label for="tInput">Введите ТНВ:</label>
        <input type="number" name="t" id="tInput" size="10">
        <input type="submit" name="submit" id="calculateButton" value="Расчитать">
        <label for="result">Расчетное потребление:</label>
        <input type="text" name="reult" id="result" size="10">
    </form>
    <br><br>

    <p>Слоёный пирог</p>
    <canvas id="chartLayerCake"></canvas>

</div>


<script type="text/javascript">

    let chartHouseLR;
    let ctxHLR = document.getElementById('chartHouseLinearRegression');
    let chartPlantLR;
    let ctxPLR = document.getElementById('chartPlantLinearRegression');

    let chartHouseMain;
    let ctxHM = document.getElementById('chartHouseMain');
    let chartPlantMain;
    let ctxPM = document.getElementById('chartPlantMain');    

    let chartLC;
    let ctxLC = document.getElementById('chartLayerCake');

    let coefficientsPlantBZ;
    let coefficientsPlantAZ;
    let coefficientsHouseBZ;
    let coefficientsHouseAZ;


    function showChart(mod, chart, chart2, isHouse, stacked) {
        let Colors = ['#f0dd0a', '#6af00a', '#0a88f0', '#1d0af0', '#a00af0', '#f00af0', '#0af0f5', '#f0a50a', '#0af00a'];
        let dataset = [];
        let dataSt = [];
        let j = 0;
        let lbls = mod.lables;
        let dependenceGrpaphs = mod.dependencyGrpaphs;
        let graphsCount = dependenceGrpaphs.length - 1;
        for (let item in dependenceGrpaphs) {
            dataset.push({ label: dependenceGrpaphs[item].name, backgroundColor: Colors[j] + '60', pointRadius: stacked ? 0 : 2, borderColor: Colors[j], data: dependenceGrpaphs[item].datasets, fill: stacked, borderWidth: stacked ? 0 : 2, stack: 'stack 0' });
            j++;
        }
        if (stacked) {
            dataset[j - 1].borderWidth = 2;
            dataset[j - 1].borderColor = '#f0190a';
            dataset[j - 1].fill = false;
            dataset[j - 1].stack = false;
        }

        const data = { labels: lbls, datasets: dataset };
        const config = {
            type: 'line',
            data: data,
            options: {
                maintainAspectRatio: !stacked,
                responsive: true,
                plugins: {
                    title: {
                        display: true,
                        text: (ctx) => 'Потребление ' + (isHouse ? 'домов' : 'заводов')
                    },
                    tooltip: {
                        mode: 'index'
                    },
                },
                interaction: {
                    mode: 'nearest',
                    axis: 'x',
                    intersect: false
                },
                scales: {
                    x: {
                        title: {
                            display: true,
                            text: isHouse ? 'ТНВ' : 'Стоимость кирпича'
                        }
                    },
                    y: {
                        stacked: stacked,
                        title: {
                            display: true,
                            text: 'Потребление'
                        }
                    }
                }
            }
        };
        if (!chart) { chart = new Chart(chart2, config) }
        else {
            chart.data.labels = lbls;
            chart.data.datasets = dataset;
            chart.update();
        }
        return (chart);
    }

    function getMainChart(formData = '') {
        $.ajax({
            url: '@Url.Action("MainChart", "Graph")',
            type: 'POST',
            data: 'type=1&' + formData,
            success: function (result) {
                mod = $.parseJSON(result);                
                chartHouseMain = showChart($.parseJSON(result), chartHouseMain, ctxHM, true, false);
            }
        });
        $.ajax({
            url: '@Url.Action("MainChart", "Graph")',
            type: 'POST',
            data: 'type=2&' + formData,
            success: function (result) {
                chartPlantMain = showChart($.parseJSON(result), chartPlantMain, ctxPM, false, false);

            }
        });
    };
    function getLinearRegression(formData = '') {
        $.ajax({
            url: '@Url.Action("GetLinearRegression", "Graph")',
            type: 'POST',
            data: 'type=1&' + formData,
            success: function (result) {
                let parse = $.parseJSON(result);
                coefficientsHouseBZ = parse.coefficientsBZ;
                coefficientsHouseAZ = parse.coefficientsAZ;
                chartHouseLR = showChart(parse, chartHouseLR, ctxHLR, true, false);

            }
        });
        $.ajax({
            url: '@Url.Action("GetLinearRegression", "Graph")',
            type: 'POST',
            data: 'type=2&' + formData,
            success: function (result) {
                let parse = $.parseJSON(result);               
                coefficientsPlantBZ = parse.coefficientsBZ;
                coefficientsPlantAZ = parse.coefficientsAZ;                
                chartPlantLR = showChart(parse, chartPlantLR, ctxPLR, false, false);
            }
        });
    }

    function getLayerCake() {
        $.ajax({
            url: '@Url.Action("GetLayerCake", "Graph")',
            type: 'POST',
            success: function (result) {

                chartLC = showChart($.parseJSON(result), chartLC, ctxLC, true, true);
                chartLC.canvas.parentNode.style.height = '1500px';

            }
        });
    }    

    $(document).ready(function () {
        getMainChart();
        getLinearRegression();
        getLayerCake();
        //---
        $('#dateForm').submit(function (event) {
            event.preventDefault();
            formData = $(this).serialize();
            getMainChart(formData);
        });
        //---
        $('#drawLinearRegression').click(function () {
            formData = $('#dateForm').serialize();
            getLinearRegression(formData);
        });

        //---
        $('#drawLayerCake').click(function () {
            formData = $('#dateForm').serialize();
            getLayerCake();
        })
        //---
        
      
        $('#predictation').submit(function (event) {
            event.preventDefault();           
            let xPlant = $('#brickInput').val();
            let xHouse = $('#tInput').val();
            let resPlant = 0, resHouse = 0;            
            if ($.isNumeric(xPlant)) {

                resPlant = (xPlant < 0 ? (coefficientsPlantBZ.b * xPlant + coefficientsPlantBZ.a) : (coefficientsPlantAZ.b * xPlant + coefficientsPlantAZ.a));
            }

            if ($.isNumeric(xHouse)) {

                resHouse = (xHouse < 0 ? (coefficientsHouseBZ.b * xHouse + coefficientsHouseBZ.a) : (coefficientsHouseAZ.b * xHouse + coefficientsHouseAZ.a));
            }           

            $('#result').attr("value", resPlant + resHouse);            

        });


    });


</script>
